// volunteer.js - –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞

let currentUserId = null;
let currentUserType = 'volunteer';
let currentChatId = null;

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å localStorage (–µ—Å–ª–∏ storage.js –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)
function saveToStorage(key, data) {
  try {
    localStorage.setItem(key, JSON.stringify(data));
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    return false;
  }
}

function loadFromStorage(key) {
  try {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    return null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  console.log('ü§ù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  checkSavedVolunteer();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupVolunteerHandlers();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç—ã
  if (typeof initializeChat === 'function') {
    initializeChat();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
function checkSavedVolunteer() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞...');
  
  const session = JSON.parse(localStorage.getItem('userSession') || '{}');
  
  if (!session.userId || session.userType !== 'volunteer') {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä');
    alert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
    window.location.href = 'login.html';
    return;
  }
  
  currentUserId = session.userId;
  currentUserType = 'volunteer';
  
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', session.email);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞
  const volunteerProfile = loadFromStorage('volunteerProfile_' + session.userId);
  
  console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞:', volunteerProfile);
  
  if (volunteerProfile && volunteerProfile.name) {
    // –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞–±–∏–Ω–µ—Ç
    console.log('‚úÖ –ê–Ω–∫–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞–±–∏–Ω–µ—Ç');
    switchToScreen('screen-volunteer-cabinet');
    loadVolunteerTasks();
  } else {
    // –ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üìù –ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É');
    switchToScreen('screen-volunteer-registration');
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupVolunteerHandlers() {
  console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞...');
  
  // –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
  const submitBtn = document.getElementById('submitVolunteerBtn');
  if (submitBtn) {
    submitBtn.addEventListener('click', registerVolunteer);
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω');
  } else {
    console.error('‚ùå –ö–Ω–æ–ø–∫–∞ submitVolunteerBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  }
  
  // –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
  const filterBtn = document.getElementById('filterTasksBtn');
  if (filterBtn) {
    filterBtn.addEventListener('click', applyTasksFilter);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç"
  const backToCabinetBtn = document.getElementById('back-to-cabinet');
  if (backToCabinetBtn) {
    backToCabinetBtn.addEventListener('click', function() {
      switchToScreen('screen-volunteer-cabinet');
    });
  }
  
  // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const reregisterBtn = document.getElementById('reregisterVolunteerBtn');
  if (reregisterBtn) {
    reregisterBtn.addEventListener('click', function() {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
        clearUserData();
        window.location.href = 'index.html';
      }
    });
  }
  
  // Enter –≤ –ø–æ–ª—è—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const inputs = ['volName', 'volPhone', 'volCity', 'volSkills', 'volGoal'];
  inputs.forEach(inputId => {
    const input = document.getElementById(inputId);
    if (input) {
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && e.target.tagName !== 'TEXTAREA') {
          registerVolunteer();
        }
      });
    }
  });
  
console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤
console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤...');

// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
setTimeout(() => {
  if (typeof initializeChat === 'function') {
    initializeChat();
  } else {
    console.error('‚ùå –§—É–Ω–∫—Ü–∏—è initializeChat –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    
    // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const sendBtn = document.getElementById('sendVolunteerChatBtn');
    const input = document.getElementById('chat-vol-input');
    
    if (sendBtn && input) {
      console.log('üîÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...');
      
      sendBtn.addEventListener('click', function() {
        console.log('üì§ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        const text = input.value.trim();
        if (text) {
          console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
          let aiChatMessages = JSON.parse(localStorage.getItem('aiChatMessages') || '[]');
          aiChatMessages.push({
            text: text,
            isUser: true,
            timestamp: new Date().toISOString()
          });
          localStorage.setItem('aiChatMessages', JSON.stringify(aiChatMessages));
          
          input.value = '';
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞
          if (typeof loadAiChat === 'function') {
            loadAiChat();
          }
          
          // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ò–ò
          setTimeout(() => {
            aiChatMessages.push({
              text: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.',
              isUser: false,
              timestamp: new Date().toISOString()
            });
            localStorage.setItem('aiChatMessages', JSON.stringify(aiChatMessages));
            if (typeof loadAiChat === 'function') {
              loadAiChat();
            }
          }, 1000);
        }
      });
      
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          sendBtn.click();
        }
      });
      
      console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }
}, 500);

}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function switchToScreen(screenId) {
  console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenId);
  
  const currentScreen = document.querySelector('.screen.active');
  const targetScreen = document.getElementById(screenId);
  
  if (currentScreen) {
    currentScreen.classList.remove('active');
  }
  
  if (targetScreen) {
    targetScreen.classList.add('active');
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤—ã–π input
    const firstInput = targetScreen.querySelector('input, textarea');
    if (firstInput) {
      setTimeout(() => firstInput.focus(), 100);
    }
  } else {
    console.error('‚ùå –≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenId);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
  if (screenId === 'screen-volunteer-cabinet') {
    loadVolunteerTasks();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç —Å –ò–ò –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è
    if (typeof loadAiChat === 'function') {
      loadAiChat();
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
function registerVolunteer() {
  console.log('ü§ù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞...');
  
  const nameInput = document.getElementById('volName');
  const phoneInput = document.getElementById('volPhone');
  const cityInput = document.getElementById('volCity');
  const formatSelect = document.getElementById('volFormat');
  const skillsTextarea = document.getElementById('volSkills');
  const goalTextarea = document.getElementById('volGoal');
  
  console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã:', {
    nameInput: !!nameInput,
    phoneInput: !!phoneInput,
    cityInput: !!cityInput,
    formatSelect: !!formatSelect,
    skillsTextarea: !!skillsTextarea,
    goalTextarea: !!goalTextarea
  });
  
  const name = nameInput ? nameInput.value.trim() : '';
  const phone = phoneInput ? phoneInput.value.trim() : '';
  const city = cityInput ? cityInput.value.trim() : '';
  const format = formatSelect ? formatSelect.value : '';
  const skills = skillsTextarea ? skillsTextarea.value.trim() : '';
  const goal = goalTextarea ? goalTextarea.value.trim() : '';
  
  console.log('üìù –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:', { 
    name, 
    phone, 
    city, 
    format, 
    skillsLength: skills.length, 
    goalLength: goal.length 
  });
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const validation = validateVolunteerData({ name, phone, city, format, skills, goal });
  if (!validation.isValid) {
    console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', validation.message);
    alert(validation.message);
    return;
  }
  
  console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
  const session = JSON.parse(localStorage.getItem('userSession') || '{}');
  const users = JSON.parse(localStorage.getItem('users') || '[]');
  const user = users.find(u => u.id === session.userId);
  
  if (!user) {
    console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
    alert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    window.location.href = 'login.html';
    return;
  }
  
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
  const volunteerProfile = {
    userId: user.id,
    email: user.email,
    name: name,
    phone: phone,
    city: city,
    format: format,
    skills: skills,
    goal: goal,
    registrationDate: new Date().toISOString(),
    isActive: true,
    completedTasks: 0,
    rating: 5.0
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
  const profileSaved = saveToStorage('volunteerProfile_' + user.id, volunteerProfile);
  
  if (!profileSaved) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω
  user.hasProfile = true;
  user.profileType = 'volunteer';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userIndex = users.findIndex(u => u.id === user.id);
  if (userIndex >= 0) {
    users[userIndex] = user;
    localStorage.setItem('users', JSON.stringify(users));
  }
  
  currentUserId = user.id;
  console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ —Å–æ–∑–¥–∞–Ω:', volunteerProfile);
  
  alert('–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤! üéâ');
  switchToScreen('screen-volunteer-cabinet');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
function validateVolunteerData(data) {
  if (!data.name || data.name.length < 2) {
    return { isValid: false, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)' };
  }
  
  if (!data.phone || data.phone.length < 10) {
    return { isValid: false, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)' };
  }
  
  if (!data.city || data.city.length < 2) {
    return { isValid: false, message: '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)' };
  }
  
  if (!data.format) {
    return { isValid: false, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏' };
  }
  
  if (!data.skills || data.skills.length < 10) {
    return { isValid: false, message: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)' };
  }
  
  if (!data.goal || data.goal.length < 10) {
    return { isValid: false, message: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)' };
  }
  
  return { isValid: true, message: '–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã' };
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
function loadVolunteerTasks() {
  console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞...');
  
  const container = document.getElementById('volTasksList');
  if (!container) {
    console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä volTasksList –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const requests = loadFromStorage('clientRequests') || [];
  const activeTasks = requests.filter(task => task.status === 'active');
  
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:', {
    –≤—Å–µ–≥–æ_–∑–∞—è–≤–æ–∫: requests.length,
    –∞–∫—Ç–∏–≤–Ω—ã—Ö_–∑–∞–¥–∞—á: activeTasks.length
  });
  
  if (activeTasks.length === 0) {
    container.innerHTML = `
      <div style="text-align: center; padding: 20px; color: #666;">
        <p>üîç –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á</p>
        <p>–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
      </div>
    `;
    return;
  }
  
  const tasksHTML = activeTasks.map(task => {
    const hasViewed = task.viewedBy && task.viewedBy.includes(currentUserId);
    const hasResponded = task.responses && task.responses.some(r => r.volunteerId === currentUserId);
    const responseCount = task.responses ? task.responses.length : 0;
    
    return `
      <div class="taskcard">
        <div class="taskcat">${task.category}</div>
        <div class="taskcity">üìç ${task.city} ‚Ä¢ ${task.format}</div>
        <p>${task.task}</p>
        <div style="display: flex; justify-content: space-between; align-items: center; margin: 10px 0;">
          <span style="font-size: 0.9em; color: #666;">‚úã –û—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å: ${responseCount}</span>
          <small>${getTimeAgo(task.timestamp)}</small>
        </div>
        <div class="taskbtn">
          <button onclick="viewTask('${task.id}')" 
                  style="background: ${hasViewed ? '#ccc' : '#2196F3'}; color: white; border: none; padding: 5px 10px; border-radius: 5px; margin-right: 5px;">
            ${hasViewed ? 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ' : 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'}
          </button>
          <button onclick="respondToTask('${task.id}')" 
                  style="background: ${hasResponded ? '#4CAF50' : '#ff9800'}; color: white; border: none; padding: 5px 10px; border-radius: 5px;"
                  ${hasResponded ? 'disabled' : ''}>
            ${hasResponded ? '‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å' : '‚úã –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'}
          </button>
          ${hasResponded ? `<button onclick="openVolunteerChat('${task.id}')" style="background: #9C27B0; color: white; border: none; padding: 5px 10px; border-radius: 5px; margin-left: 5px;">üí¨ –ß–∞—Ç</button>` : ''}
        </div>
      </div>
    `;
  }).join('');
  
  container.innerHTML = tasksHTML;
  console.log('‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
window.viewTask = function(taskId) {
  console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏:', taskId);
  
  const requests = loadFromStorage('clientRequests') || [];
  const task = requests.find(t => t.id === taskId);
  if (!task) {
    console.error('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', taskId);
    return;
  }
  
  if (!task.viewedBy) task.viewedBy = [];
  if (!task.viewedBy.includes(currentUserId)) {
    task.viewedBy.push(currentUserId);
    saveToStorage('clientRequests', requests);
    console.log('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserId);
  }
  
  alert(`–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏:\n\nüìã ${task.task}\n\nüìç –ì–æ—Ä–æ–¥: ${task.city}\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${task.category}\nüíº –§–æ—Ä–º–∞—Ç: ${task.format}\n\n‚è∞ –°–æ–∑–¥–∞–Ω–∞: ${getTimeAgo(task.timestamp)}`);
  loadVolunteerTasks();
};

// –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–¥–∞—á—É
window.respondToTask = function(taskId) {
  console.log('‚úã –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–¥–∞—á—É:', taskId);
  
  const requests = loadFromStorage('clientRequests') || [];
  const task = requests.find(t => t.id === taskId);
  if (!task) {
    console.error('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', taskId);
    return;
  }
  
  if (!task.responses) task.responses = [];
  
  const alreadyResponded = task.responses.some(r => r.volunteerId === currentUserId);
  if (alreadyResponded) {
    alert('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É');
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫
  task.responses.push({
    volunteerId: currentUserId,
    timestamp: new Date().toISOString(),
    status: 'pending'
  });
  
  saveToStorage('clientRequests', requests);
  console.log('‚úÖ –û—Ç–∫–ª–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
  
  // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
  const chatId = `${task.clientId}_${currentUserId}`;
  let chats = loadFromStorage('directChats') || {};
  if (!chats[chatId]) {
    chats[chatId] = {
      id: chatId,
      taskId: taskId,
      clientId: task.clientId,
      volunteerId: currentUserId,
      messages: [{
        id: generateId(),
        senderId: currentUserId,
        text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ–π.',
        timestamp: new Date().toISOString()
      }]
    };
    saveToStorage('directChats', chats);
    console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chatId);
  }
  
  alert('–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéâ\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —á–∞—Ç–µ.');
  loadVolunteerTasks();
};

// –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º
window.openVolunteerChat = function(taskId) {
  console.log('üí¨ –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId);
  
  const requests = loadFromStorage('clientRequests') || [];
  const task = requests.find(t => t.id === taskId);
  if (!task) {
    console.error('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', taskId);
    return;
  }
  
  const chatId = `${task.clientId}_${currentUserId}`;
  const chats = loadFromStorage('directChats') || {};
  const chat = chats[chatId];
  
  if (!chat) {
    alert('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    return;
  }
  
  currentChatId = chatId;
  openDirectChat(chatId, `–ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º (${task.category})`);
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyTasksFilter() {
  console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
  
  const categoryFilter = document.getElementById('filter-category');
  const formatFilter = document.getElementById('filter-format');
  const cityFilter = document.getElementById('filter-city');
  
  // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
  // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
  loadVolunteerTasks();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä—è–º–æ–≥–æ —á–∞—Ç–∞
function openDirectChat(chatId, title) {
  console.log('üí¨ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä—è–º–æ–≥–æ —á–∞—Ç–∞:', chatId);
  
  const titleElement = document.getElementById('direct-chat-title');
  if (titleElement) {
    titleElement.textContent = title;
  }
  
  switchToScreen('screen-direct-chat');
  loadDirectChatMessages(chatId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä—è–º–æ–≥–æ —á–∞—Ç–∞
function loadDirectChatMessages(chatId) {
  console.log('üì® –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞:', chatId);
  
  const container = document.getElementById('direct-chat-messages');
  if (!container) {
    console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const chats = loadFromStorage('directChats') || {};
  const chat = chats[chatId];
  
  if (!chat || !chat.messages || chat.messages.length === 0) {
    container.innerHTML = '<p style="color: #666; text-align: center; padding: 20px;">–ß–∞—Ç –ø—É—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üí¨</p>';
    return;
  }
  
  const messagesHTML = chat.messages.map(message => {
    const isMyMessage = message.senderId === currentUserId;
    return `
      <div style="margin: 10px 0; text-align: ${isMyMessage ? 'right' : 'left'};">
        <div style="
          display: inline-block;
          max-width: 70%;
          padding: 8px 12px;
          border-radius: 18px;
          background: ${isMyMessage ? '#4CAF50' : '#e3f2fd'};
          color: ${isMyMessage ? 'white' : '#333'};
          word-wrap: break-word;
        ">
          ${message.text}
        </div>
        <div style="font-size: 0.8em; color: #666; margin-top: 2px;">
          ${getTimeAgo(message.timestamp)}
        </div>
      </div>
    `;
  }).join('');
  
  container.innerHTML = messagesHTML;
  container.scrollTop = container.scrollHeight;
  
  console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', chat.messages.length);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateId() {
  return Date.now() + Math.random().toString(36).substr(2, 9);
}

function getTimeAgo(timestamp) {
  const now = new Date();
  const time = new Date(timestamp);
  const diff = Math.floor((now - time) / 1000 / 60);
  
  if (diff < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  if (diff < 60) return `${diff} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  if (diff < 1440) return `${Math.floor(diff / 60)} —á. –Ω–∞–∑–∞–¥`;
  return `${Math.floor(diff / 1440)} –¥–Ω. –Ω–∞–∑–∞–¥`;
}

function saveUserData() {
  if (currentUserId && currentUserType) {
    saveToStorage('currentUser', {
      id: currentUserId,
      type: currentUserType
    });
  }
}

function clearUserData() {
  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const session = JSON.parse(localStorage.getItem('userSession') || '{}');
  if (session.userId) {
    localStorage.removeItem('volunteerProfile_' + session.userId);
  }
  
  localStorage.removeItem('userSession');
  localStorage.removeItem('rememberMe');
  localStorage.removeItem('currentUser');
  localStorage.removeItem('clientRequests');
  localStorage.removeItem('directChats');
  localStorage.removeItem('aiChatMessages');
  
  console.log('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã');
}